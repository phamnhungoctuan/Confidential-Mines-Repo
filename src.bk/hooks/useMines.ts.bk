import { ethers } from "ethers";
import ConfidentialMinesAbi from "../../frontend/src/abi/ConfidentialMines.json";

const CONTRACT_ADDRESS = import.meta.env.VITE_CONTRACT_ADDRESS as string;

if (!CONTRACT_ADDRESS) {
  throw new Error("‚ö†Ô∏è Missing VITE_CONTRACT_ADDRESS in .env file");
} else {
  console.log(`‚úÖ Using contract address: ${CONTRACT_ADDRESS}`);
}

const sdkConfig = {
  aclContractAddress: "0x687820221192C5B662b25367F70076A37bc79b6c",
  kmsContractAddress: "0x1364cBBf2cDF5032C47d8226a6f6FBD2AFCDacAC",
  inputVerifierContractAddress: "0xbc91f3daD1A5F19F8390c400196e58073B6a0BC4",
  verifyingContractAddressDecryption: "0xb6E160B1ff80D67Bfe90A85eE06Ce0A2613607D1",
  verifyingContractAddressInputVerification: "0x7048C39f048125eDa9d678AEbaDfB22F7900a29F",
  chainId: 11155111,
  gatewayChainId: 55815,
  network: "https://eth-sepolia.public.blastapi.io",
  relayerUrl: "https://relayer.testnet.zama.cloud",
};

async function getContract() {
  const provider = new ethers.BrowserProvider(window.ethereum);
  const signer = await provider.getSigner();
  return new ethers.Contract(CONTRACT_ADDRESS, ConfidentialMinesAbi.abi, signer);
}

async function encryptBoardInWorker(board: number[], contract: string, user: string) {
  return new Promise<{ encryptedTiles: string[]; inputProof: string }>((resolve, reject) => {
    const worker = new Worker("/encryptWorker.js", { type: "classic" });

    worker.onmessage = (e) => {
      if (e.data.error) reject(e.data.error);
      else resolve(e.data);
      worker.terminate();
    };

    worker.postMessage({
      board,
      contractAddress: contract,
      userAddress: user,
      sdkConfig,
    });
  });
}

/** ‚ö° Create game (commit-reveal) */
export async function createGame(board: number[], seed: number) {
  console.log("üü¢ createGame...");
  await window.ethereum.request({ method: "eth_requestAccounts" });

  const provider = new ethers.BrowserProvider(window.ethereum);
  const signer = await provider.getSigner();
  const signerAddr = await signer.getAddress();
  const contract = await getContract();

  console.time("encryptBoard (worker)");
  const { encryptedTiles, inputProof } = await encryptBoardInWorker(board, CONTRACT_ADDRESS, signerAddr);
  console.timeEnd("encryptBoard (worker)");

  // ‚úÖ Commit hash = hash(seed, player, boardSize)
  const commitHash = ethers.keccak256(
    ethers.AbiCoder.defaultAbiCoder().encode(["uint256", "address", "uint8"], [seed, signerAddr, board.length]),
  );

  const tx = await contract.createGame(encryptedTiles, inputProof, commitHash, board.length);
  return tx;
}

/** üí• Pick local (simulate) */
export function pickTileLocal(board: number[], index: number, state: { safeCount: number; multiplier: number }) {
  const tile = board[index];
  if (tile === 1) {
    console.log("üí• BOOM! Tr√∫ng bomb");
    return { ...state, boom: true };
  }
  const newSafeCount = state.safeCount + 1;
  const newMultiplier = Math.floor(state.multiplier * 1.05); // +5%
  console.log(`‚úÖ SAFE! safeCount=${newSafeCount}, multiplier=${newMultiplier}`);
  return { safeCount: newSafeCount, multiplier: newMultiplier, boom: false };
}

/** üí∞ Cashout */
export async function cashOut(gameId: number) {
  console.log("üí∞ cashOut");
  const contract = await getContract();
  const tx = await contract.cashOut(gameId);
  await tx.wait();
  console.log("‚úÖ cashOut done");
}

/** üìú Reveal plaintext board (optional) */
export async function revealGame(gameId: number, board: number[]) {
  console.log("üìú revealGame");
  const contract = await getContract();
  const tx = await contract.revealGame(gameId, board);
  await tx.wait();
  console.log("‚úÖ revealGame done");
}

/** üîë Reveal seed for provably-fair check */
export async function revealSeed(gameId: number, seed: number) {
  console.log("üîë revealSeed");
  const contract = await getContract();
  const tx = await contract.revealSeed(gameId, seed);
  await tx.wait();
  console.log("‚úÖ revealSeed done");
}
